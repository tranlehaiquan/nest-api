generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-arm64-openssl-1.1.x", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                String                @id @default(uuid())
  email             String                @unique
  username          String                @unique
  bio               String                @default("")
  image             String?
  salt              String
  hash              String
  posts             Post[]
  followedBy        Follows[]             @relation("following")
  following         Follows[]             @relation("follower")
  comment           Comment[]
  favoritedComments UserFavoriteComment[]
}

model Post {
  id          String    @id @default(uuid())
  title       String
  description String?
  body        String
  published   Boolean?  @default(false)
  author      User      @relation(fields: [authorId], references: [id])
  authorId    String
  slug        String    @unique
  updatedAt   DateTime  @updatedAt
  createdAt   DateTime  @default(now())
  tags        Tag[]
  comment     Comment[]
  deleted     DateTime?
}

// Tag
model Tag {
  id          String @id @default(uuid())
  name        String @unique
  description String
  slug        String
  post        Post[]
}

model Follows {
  follower    User   @relation("follower", fields: [followerId], references: [id])
  followerId  String
  following   User   @relation("following", fields: [followingId], references: [id])
  followingId String

  @@id([followerId, followingId])
}

// comments
model Comment {
  id         String                @id @default(uuid())
  body       String
  author     User                  @relation(fields: [authorId], references: [id])
  authorId   String
  post       Post                  @relation(fields: [postId], references: [id])
  postId     String
  updatedAt  DateTime              @updatedAt
  createdAt  DateTime              @default(now())
  favoriteBy UserFavoriteComment[]
  deleted    DateTime?
}

// User favorites comments
model UserFavoriteComment {
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  comment   Comment @relation(fields: [commentId], references: [id])
  commentId String

  @@id([userId, commentId])
}
